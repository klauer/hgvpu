#Automatically generated by poly-script, do not modify!
####################################################################

# change directory to ioc Application Top
chdir("../..")

# Load IOC Application
#ld("bin/RTEMS-mvme3100/ucmIoc.obj")
ld("bin/RTEMS-beatnik/ucmIoc.obj")

# Register all support components
dbLoadDatabase( "dbd/ucmIoc.dbd")
ucmIoc_registerRecordDeviceDriver( pdbbase) 

# ------------------------------------------------------------------------
## Set common environment variables
epicsEnvSet("IOC_NAME",  "UC01")
epicsEnvSet("LOCA_NAME", "UND1")

# Setup for iocAdmin:
epicsEnvSet("ENGINEER","Mitch D'Ewart")
epicsEnvSet("LOCATION","UIR-01")
# ------------------------------------------------------------------------

# Adding to the useful abbreviations. NB: no () here (that executes the cmd!)
rr=bsp_reset

# This section will begin all the initialization of routines, drivers, 
# device support, etc... We will also do configuration
# Need to do the following before any driver/device support initialization:
# ===================== Begin GeneralTime Hack =============================
osdTimeRegister()
generalTimeReport(2)
# ===================== End GeneralTime Hack ===============================

# Initialize IP carrier
bspExtVerbosity=0
ipacAddXy9660("0x0,1 A=1,D00000")

# (Marty Smith)
# This is used for the Acromag FPGA DIO module IP-EP201
# It is located on the second IP carrier card
# Currently the DIO module is in the B slot and the SOPC
# base address is 0x800000 for the FPGA to put it in MEM
# address space
ipacAddXy9660("0x6000,3 B=1,800000 C=1,A00000")

################# SSI Encoders TIP114 ###############################
#int initTip114 (const char *portName,ushort_t carrier,ushort_t slot,int intVec)
initTip114("LinEnc",1,3,0)
################# SSI Linear Encoders TIP114 ##############################
configTip114("LinEnc",0,32,5,"B","N",0)
configTip114("LinEnc",1,32,5,"B","N",0)
configTip114("LinEnc",2,32,5,"B","N",0)
configTip114("LinEnc",3,32,5,"B","N",0)
configTip114("LinEnc",4,32,5,"B","N",0)

# (Marty Smith)

# ---------------------------------------------------------------
# Allocate the number of tyGSOctal modules to support.
# ---------------------------------------------------------------
# tyGSOctalDrv(maxModules), where  maxModules is the maximum
# number of modules to support.
tyGSOctalDrv(2)

# Initialize octal UART (all channels)
# ----------------------------
# tyGSOctalModuleInit(char *moduleID, char *ModuleType, int irq_num,
#                     char *carrier#, int slot#)
#   moduleID   - assign the IP module a name for future reference. 
#   ModuleType - "RS232", "RS422", or "RS485".
#   irq_num    - interrupt request number/vector.
#   carrier#   - carrier# assigned from the ipacAddCarrierType() call.
#   slot#      - slot number on carrier; slot[A,B,C,D] -> slot#[0,1,2,3].
tyGSOctalModuleInit("MOD0","RS232", 196, 0, 0)

# This is used for ID motor motion
tyGSOctalModuleInit("MOD1","RS232", 200, 1, 2)

##Initialize IP-OPTOIO-8
initIpUnidig("io8",0,1,0)

## Initialize IP330 ADC
##  portName,Carrier,Slot,typeString,rangeString,firstChan,lastChan,intVec
initIp330("ai1",0,2,"S","0to5",0,31,192)
##  portName,scanMode,triggerString,microSecondsPerScan,secondsBetweenCalibrate
##        scanMode = scan mode:
##               0 = disable
##               1 = uniformContinuous
##               2 = uniformSingle
##               3 = burstContinuous (normally recommended)
##               4 = burstSingle
##               5 = convertOnExternalTriggerOnly
configIp330("ai1",1,"Input",1000,0)


# ========================================================================
#  Create tty devices.
# -------------------------------------------------------------------------
# tyGSOctalDevCreate(char *portname, int moduleID, int port#, int rdBufSize,
#                    int wrtBufSize)
#   portname   - assign the port a name for future reference.
#   moduleID   - moduleID from the tyGSOctalModuleInit() call.
#   port#      - port number for this module [0-7].
#   rdBufSize  - read buffer size, in bytes.
#   wrtBufSize - write buffer size, in bytes.
# -----------------------------------------------------------------------
## Create RS232 Octal Device for Animatics Smart Motors:
## tyGSOctalDevCreate(devName,moduleID,port,rdBufSize,wrBufSize)
tyGSOctalDevCreate("/tyGS:0:","MOD0",-1,1000,1000)

# This is used for ID motor control
tyGSOctalDevCreate("/tyGS:1:","MOD1",-1,1000,1000)

# Now it is time to the asyn layer of software:
# Use drvAsynSerialPortConfigure
# drvAsynSerialPortConfigure("portName","ttyName",priority,noAutoConnect,noProcessEosIn)
# where the arguments are:
#    * portName - The portName that is registered with asynGpib.
#    * ttyName - The name of the local serial port (e.g. "/dev/ttyS0").
#    * priority - Priority at which the asyn I/O thread will run. If this is zero or missing,then
#      epicsThreadPriorityMedium is used.
#    * addr - This argument is ignored since serial devices are configured with multiDevice=0.
#    * noAutoConnect - Zero or missing indicates that portThread should automatically connect. Non-zero if
#      explicit connect command must be issued.
#    * noProcessEos If 0 then asynInterposeEosConfig is called specifying both processEosIn and processEosOut.

# Don't forget to setup asynSetOption
# asynSetOption("portName",addr,"key","value")
# The following parameters are for the "key"  "value" pairs
# baud   9600 50 75 110 134 150 200 300 600 1200 ... 230400
# bits  8 7 6 5
# parity  none even odd
# stop  1 2
# clocal  Y N
# crtscts  N Y

# The clocal and crtscts parameter names are taken from the POSIX termios serial interface definition. The clocal 
# parameter controls whether the modem control lines (Data Terminal Ready, Carrier Detect/Received Line Signal 
# Detect) are used (clocal=N) or ignored (clocal=Y). The crtscts parameter controls whether the hardware 
# handshaking lines (Request To Send, Clear To Send) are used (crtscts=Y) or ignored (crtscts=N).

# Now what about Debugging:
# asynSetTraceIOMask(portName,addr,mask)
# asynSetTraceMask(portName,addr,mask)
# asynReport(level,portName)

## Create serial port for Animatics Smart Motor - Cam #1
drvAsynSerialPortConfigure("L0","/tyGS:0:0",0,0,0)
## Configure serial port parameters
asynSetOption("L0", -1, "baud", "9600")
asynSetOption("L0", -1, "bits", "8")
asynSetOption("L0", -1, "parity", "none")
asynSetOption("L0", -1, "stop", "1")
asynSetOption("L0", -1, "clocal", "Y")
asynSetOption("L0", -1, "crtscts", "N")

# For Debugging uncomment the following:
#asynSetTraceIOMask("L0", 0, 2)
#asynSetTraceMask("L0", 0, 0x19)

## Create serial port for Animatics Smart Motor - Cam #2
## tyGSOctalDevCreate(devName,moduleID,port,rdBufSize,wrBufSize)
drvAsynSerialPortConfigure("L1","/tyGS:0:1",0,0,0)
## Configure serial port parameters
asynSetOption("L1", -1, "baud", "9600")
asynSetOption("L1", -1, "bits", "8")
asynSetOption("L1", -1, "parity", "none")
asynSetOption("L1", -1, "stop", "1")
asynSetOption("L1", -1, "clocal", "Y")
asynSetOption("L1", -1, "crtscts", "N")

# For Debugging uncomment the following:
#asynSetTraceIOMask("L1", 0, 2)
#asynSetTraceMask("L1", 0, 0x19)

## Create serial port for Animatics Smart Motor - Cam #3
## tyGSOctalDevCreate(devName,moduleID,port,rdBufSize,wrBufSize)
drvAsynSerialPortConfigure("L2","/tyGS:0:2",0,0,0)
## Configure serial port parameters
asynSetOption("L2", -1, "baud", "9600")
asynSetOption("L2", -1, "bits", "8")
asynSetOption("L2", -1, "parity", "none")
asynSetOption("L2", -1, "stop", "1")
asynSetOption("L2", -1, "clocal", "Y")
asynSetOption("L2", -1, "crtscts", "N")

# For Debugging uncomment the following:
#asynSetTraceIOMask("L2", -1, 2)
#asynSetTraceMask("L2", -1, 0x1)

## Create serial port for Animatics Smart Motor - Cam #4
## tyGSOctalDevCreate(devName,moduleID,port,rdBufSize,wrBufSize)
drvAsynSerialPortConfigure("L3","/tyGS:0:3",0,0,0)
## Configure serial port parameters
asynSetOption("L3", -1, "baud", "9600")
asynSetOption("L3", -1, "bits", "8")
asynSetOption("L3", -1, "parity", "none")
asynSetOption("L3", -1, "stop", "1")
asynSetOption("L3", -1, "clocal", "Y")
asynSetOption("L3", -1, "crtscts", "N")

# For Debugging uncomment the following:
#asynSetTraceIOMask("L3", -1, 2)
#asynSetTraceMask("L3", -1, 0x1)

## Create serial port for Animatics Smart Motor - Cam #5
## tyGSOctalDevCreate(devName,moduleID,port,rdBufSize,wrBufSize)
drvAsynSerialPortConfigure("L4","/tyGS:0:4",0,0,0)
## Configure serial port parameters
asynSetOption("L4", -1, "baud", "9600")
asynSetOption("L4", -1, "bits", "8")
asynSetOption("L4", -1, "parity", "none")
asynSetOption("L4", -1, "stop", "1")
asynSetOption("L4", -1, "clocal", "Y")
asynSetOption("L4", -1, "crtscts", "N")

# For Debugging uncomment the following:
#asynSetTraceIOMask("L4", -1, 2)
#asynSetTraceMask("L4", -1, 0x1)

###########################################################################
# HGVPU Gap Motors
## Create serial port for Animatics Smart Motor - US Wall ID motor
drvAsynSerialPortConfigure("L7","/tyGS:1:3",0,0,0)
## Configure serial port parameters
asynSetOption("L7", -1, "baud", "9600")
asynSetOption("L7", -1, "bits", "8")
asynSetOption("L7", -1, "parity", "none")
asynSetOption("L7", -1, "stop", "1")
asynSetOption("L7", -1, "clocal", "Y")
asynSetOption("L7", -1, "crtscts", "N")

# For Debugging uncomment the following:
#asynSetTraceIOMask("L7", -1, 2)
#asynSetTraceMask("L7", -1, 0x1)

### Create serial port for Animatics Smart Motor - US Aisle ID motor
#drvAsynSerialPortConfigure("L8","/tyGS:1:4",0,0,0)
## Configure serial port parameters
#asynSetOption("L8", -1, "baud", "9600")
#asynSetOption("L8", -1, "bits", "8")
#asynSetOption("L8", -1, "parity", "none")
#asynSetOption("L8", -1, "stop", "1")
#asynSetOption("L8", -1, "clocal", "Y")
#asynSetOption("L8", -1, "crtscts", "N")

# For Debugging uncomment the following:
#asynSetTraceIOMask("L8", -1, 2)
#asynSetTraceMask("L8", -1, 0x1)

### Create serial port for Animatics Smart Motor - DS Wall ID motor
#drvAsynSerialPortConfigure("L9","/tyGS:1:1",0,0,0)
### Configure serial port parameters
#asynSetOption("L9", -1, "baud", "9600")
#asynSetOption("L9", -1, "bits", "8")
#asynSetOption("L9", -1, "parity", "none")
#asynSetOption("L9", -1, "stop", "1")
#asynSetOption("L9", -1, "clocal", "Y")
#asynSetOption("L9", -1, "crtscts", "N")

# For Debugging uncomment the following:
#asynSetTraceIOMask("L9", -1, 2)
#asynSetTraceMask("L9", -1, 0x1)

### Create serial port for Animatics Smart Motor - DS Aisle ID motor
#drvAsynSerialPortConfigure("L10","/tyGS:1:2",0,0,0)
### Configure serial port parameters
#asynSetOption("L10", -1, "baud", "9600")
#asynSetOption("L10", -1, "bits", "8")
#asynSetOption("L10", -1, "parity", "none")
#asynSetOption("L10", -1, "stop", "1")
#asynSetOption("L10", -1, "clocal", "Y")
#asynSetOption("L10", -1, "crtscts", "N")

# For Debugging uncomment the following:
#asynSetTraceIOMask("L10", -1, 2)
#asynSetTraceMask("L10", -1, 0x1)
###########################################################################

## Setup SmartMotor System
## SmartMotorSetup(Max Controller Count, Polling Rate)
iocshCmd("SmartMotorSetup(5,5)")

## Setup/Configure SmartMotor parameters - CAM #1
## SmartMotorConfig("Card" #, ASYN port)
iocshCmd("SmartMotorConfig(0,L0)")
iocshCmd("SmartCreateController(S0,L0,1,0,100,1000)")

## Setup/Configure SmartMotor parameters - CAM #2
## SmartMotorConfig("Card" #, ASYN port)
iocshCmd("SmartMotorConfig(1,L1)")
iocshCmd("SmartCreateController(S1,L1,1,0,100,1000)")

## Setup/Configure SmartMotor parameters - CAM #3
## SmartMotorConfig("Card" #, ASYN port)
iocshCmd("SmartMotorConfig(2,L2)")
iocshCmd("SmartCreateController(S2,L2,1,0,100,1000)")

## Setup/Configure SmartMotor parameters - CAM #4
## SmartMotorConfig("Card" #, ASYN port)
iocshCmd("SmartMotorConfig(3,L3)")
iocshCmd("SmartCreateController(S3,L3,1,0,100,1000)")

## Setup/Configure SmartMotor parameters - CAM #5
## SmartMotorConfig("Card" #, ASYN port)
iocshCmd("SmartMotorConfig(4,L4)")
iocshCmd("SmartCreateController(S4,L4,1,0,100,1000)")

###########################################################################
## HGVPU Gap Motors
## Setup/Configure SmartMotor parameters - US Wall ID motor
## SmartMotorConfig("Card" #, ASYN port)
iocshCmd("SmartCreateController(S7,L7,4,1,100,1000)")

### Setup/Configure SmartMotor parameters - US Aisle ID motor
### SmartMotorConfig("Card" #, ASYN port)
#iocshCmd("SmartCreateController(S8,L8,1,0,100,1000)")

### Setup/Configure SmartMotor parameters - DS Wall ID motor
### SmartMotorConfig("Card" #, ASYN port)
#iocshCmd("SmartCreateController(S9,L9,1,0,100,1000)")

### Setup/Configure SmartMotor parameters - DS Aisle ID motor
### SmartMotorConfig("Card" #, ASYN port)
#iocshCmd("SmartCreateController(S10,L10,1,0,100,1000)")
###########################################################################

## Motor support debugging messages
#var drvSmartMotordebug 4

################# FPGA IP Module ###############################
# It is best to not init the FPGA until after ASYN has connected to the motors
# becuase this will shut off power to the motors due to taper (skew) and
# symmetry errors. You can recover from these errors once the IOC has booted.
#
#    Initialize the FPGA
#-----------------------
#    Write content to the FPGA.    This command will fail if the FPGA already
#    has content loaded, as it will after a soft reboot.  To load new FPGA
#    content, you must power cycle the ioc.
#
#    initIP_EP200_FPGA(ushort carrier, ushort slot, char *filename)
#    carrier:  IP-carrier number (numbering begins at 0)
#    slot:     IP-slot number (numbering begins at 0)
#    filename: Name of the FPGA-content hex file to load into the FPGA.
#
# Currently I am not loding the FPGA firmware at boot time plus this is
# for softGlue and not the HGVPU FPGA

#    standard softGlue 2.2
#initIP_EP200_FPGA(0, 2, "$(SOFTGLUE,undefined)/softGlueApp/Db/SoftGlue_2_2.hex")
#    standard softGlue 2.2 plus two shift registers
#initIP_EP200_FPGA(0, 2, "$(SOFTGLUE,undefined)/softGlueApp/Db/SoftGlue_2_2_Octupole_0_0.hex")
#    standard softGlue 2.2 plus two up/down counters
#initIP_EP200_FPGA(0, 2, "$(SOFTGLUE,undefined)/softGlueApp/Db/SoftGlue_2_2_1ID_Vgate_0_1.hex")
# Use this line to load the HGVPU hex file into FPGA at cold boot (Not tested)
initIP_EP200_FPGA(1, 1, "ucmApp/Db/undulator/HGVPU_SSI_SLACLatched_v2.hexout")

################################################################################
# OLD SOFTGLUE DRIVER
# Carrier # (zero based), Slot number (0 - 3),
#int initIP_EP201(const char *portName, ushort_t carrier, ushort_t slot,
#                 int msecPoll, int dataDir, int sopcOffset, int sopcVector
#                 int risingMask, int fallingMask)
# limits - ID Limit switches and Motor limits (inhibits)
#!initIP_EP201("limits",1,1,0,0x100,0x800000 ,0x80,0,0)
# monitors - Linear encoder (CLK/DATA), Encoder Math Errors, voltage monitors
#!initIP_EP201("monitors",1,1,0,0,0x800010,0x81,0,0)
# idmon - PS limits, ID taper, and motor stop function
#!initIP_EP201("idmon",1,1,0,1,0x800020,0x82,0,0)

################################################################################
#    Initialize basic field I/O 
#------------------------------
#    int initIP_EP200(ushort carrier, ushort slot, char *portName1,
#        char *portName2, char *portName3, int sopcBase)
#    carrier:   IP-carrier number (numbering begins at 0)
#    slot:      IP-slot number (numbering begins at 0)
#    portName1: Name of asyn port for component at sopcBase
#    portName2: Name of asyn port for component at sopcBase+0x10
#    portName3: Name of asyn port for component at sopcBase+0x20
#    sopcBase:  must agree with FPGA content (0x800000)
initIP_EP200(1, 1, "limits", "monitors", "idmon", 0x800000)

################################################################################
#    Initialize field-I/O interrupt support
#------------------------------------------
#    int initIP_EP200_Int(ushort carrier, ushort slot, int intVectorBase,
#        int risingMaskMS, int risingMaskLS, int fallingMaskMS,
#        int fallingMaskLS)
#    carrier:       IP-carrier number (numbering begins at 0)
#    slot:          IP-slot number (numbering begins at 0)
#    intVectorBase: must agree with the FPGA content loaded (0x90 for softGlue
#                   2.1 and higher; 0x80 for softGlue 2.0 and lower).  softGlue
#                   uses three vectors, for example, 0x90, 0x91, 0x92.
#    risingMaskMS:  interrupt on 0->1 for I/O pins 33-48
#    risingMaskLS:  interrupt on 0->1 for I/O pins 1-32
#    fallingMaskMS: interrupt on 1->0 for I/O pins 33-48
#    fallingMaskLS: interrupt on 1->0 for I/O pins 1-32
initIP_EP200_Int(1, 1, 0x90, 0x0, 0x0, 0x0, 0x0)

################################################################################
#    Set field-I/O data direction
#--------------------------------
#    int initIP_EP200_IO(ushort carrier, ushort slot, ushort moduleType,
#        ushort dataDir)
#    carrier:    IP-carrier number (numbering begins at 0)
#    slot:       IP-slot number (numbering begins at 0)
#    moduleType: one of [201, 202, 203, 204]
#    dataDir:    Bit mask, in which only the first 9 bits are significant.  The
#                meaning of each bit depends on moduleType, as shown in the
#                table below.  If a bit is set, the corresponding field I/O pins
#                are outputs.  Note that for the 202 and 204 modules, all I/O
#                is differential, and I/O pin N is paired with pin N+1.  For the
#                203 module, pins 25/26 through 47/48 are differential pairs.
#
#    -------------------------------------------------------------------
#    |  Correspondence between dataDir bits (0-8) and I/O pins (1-48)  |
#    -------------------------------------------------------------------
#    |             |  201          |  202/204           |  203         | 
#    -------------------------------------------------------------------
#    | bit 0       |  pins 1-8     |  pins 1, 3,25,27   |  pins 25,27  | 
#    | bit 1       |  pins 9-16    |  pins 5, 7,29,31   |  pins 29,31  | 
#    | bit 2       |  pins 17-24   |  pins 9,11,33,35   |  pins 33,35  | 
#    | bit 3       |  pins 25-32   |  pins 13,15,37,39  |  pins 37,39  | 
#    |             |               |                    |              |
#    | bit 4       |  pins 33-40   |  pins 17,19,41,43  |  pins 41,43  | 
#    | bit 5       |  pins 41-48   |  pins 21,23,45,47  |  pins 45,47  | 
#    | bit 6       |         x     |            x       |  pins 1-8    | 
#    | bit 7       |         x     |            x       |  pins 9-16   | 
#    |             |               |                    |              |
#    | bit 8       |         x     |            x       |  pins 17-24  | 
#    -------------------------------------------------------------------
#    Examples:
#    1. For the IP-EP201, moduleType is 201, and dataDir == 0x3c would mean
#       that I/O bits 17-48 are outputs.
#    2. For the IP-EP202 (IP-EP204), moduleType is 202(204), and dataDir == 0x13
#       would mean that I/O bits 1,3,25,27, 5,7,29,31, 17,19,41,43 are outputs.
#    3. For the IP-EP203, moduleType is 203, and dataDir == 0x??? would mean
#       that I/O bits 1-8, 25,27, 29,31, 33,35, 45,47 are outputs.
#initIP_EP200_IO(0, 2, 201, 0x3c)
#initIP_EP200_IO(0, 2, 202, 0x13)
initIP_EP200_IO(1, 1, 201, 0x12)

################################################################################
#    Initialize softGlue signal-name support
#-------------------------------------------
#    All instances of a single-register component are initialized with a single
#    call, as follows:
#
#initIP_EP201SingleRegisterPort(char *portName, ushort carrier, ushort slot)
#
# For example:
# initIP_EP201SingleRegisterPort("SOFTGLUE", 0, 2)
#initIP_EP201SingleRegisterPort("SOFTGLUE", 0, 2)

# Init all FPGA SOPC PIO single register ports
#### initIP_EP201SingleRegisterPort(const char *portName,ushort_t carrier,ushort_t slot) #######
# internalIO - Various monitors (currently only limit lockout)
initIP_EP201SingleRegisterPort("internalIO",1,1)
# internalIO1 - Lower 16 bits US wall linear encoder value + offset
initIP_EP201SingleRegisterPort("internalIO1",1,1)
# internalIO2 - Upper 16 bits US wall linear encoder value + offset
initIP_EP201SingleRegisterPort("internalIO2",1,1)
# internalIO3 - Lower 16 bits US aisle linear encoder value + offset
initIP_EP201SingleRegisterPort("internalIO3",1,1)
# internalIO4 - Upper 16 bits US aisle linear encoder value + offset
initIP_EP201SingleRegisterPort("internalIO4",1,1)
# internalIO5 - Lower 16 bits DS wall linear encoder value + offset
initIP_EP201SingleRegisterPort("internalIO5",1,1)
# internalIO6 - Upper 16 bits DS wall linear encoder value + offset
initIP_EP201SingleRegisterPort("internalIO6",1,1)
# internalIO7 - Lower 16 bits DS aisle linear encoder value + offset
initIP_EP201SingleRegisterPort("internalIO7",1,1)
# internalIO8 - Upper 16 bits DS aisle linear encoder value + offset
initIP_EP201SingleRegisterPort("internalIO8",1,1)
# internalIO9 - US wall linear encoder offset (16-bits)
initIP_EP201SingleRegisterPort("internalIO9",1,1)
# internalIO10 - DS aisle linear encoder offset (16-bits)
initIP_EP201SingleRegisterPort("internalIO10",1,1)
# internalIO11 - US aisle linear encoder offset (16-bits)
initIP_EP201SingleRegisterPort("internalIO11",1,1)
# internalIO12 - DS wall linear encoder offset (16-bits)
initIP_EP201SingleRegisterPort("internalIO12",1,1)
# internalIO13 - ID Maximum symmetry allowed (16-bits)
initIP_EP201SingleRegisterPort("internalIO13",1,1)
# internalIO14 - ID Maximum taper allowed (16-bits)
initIP_EP201SingleRegisterPort("internalIO14",1,1)

# PIO 16 - DSA Raw Encoder Counts (Low 16-bits)
initIP_EP201SingleRegisterPort("pio16",1,1)
# PIO 17 - DSA Raw Encoder Counts (High 16-bits)
initIP_EP201SingleRegisterPort("pio17",1,1)

# PIO 18 - DSW Raw Encoder Counts (Low 16-bits)
initIP_EP201SingleRegisterPort("pio18",1,1)
# PIO 19 - DSW Raw Encoder Counts (High 16-bits)
initIP_EP201SingleRegisterPort("pio19",1,1)

# PIO 20 - USA Raw Encoder Counts (Low 16-bits)
initIP_EP201SingleRegisterPort("pio20",1,1)
# PIO 21 - USA Raw Encoder Counts (High 16-bits)
initIP_EP201SingleRegisterPort("pio21",1,1)

# PIO 22 - DSW Raw Encoder Counts (Low 16-bits)
initIP_EP201SingleRegisterPort("pio22",1,1)
# PIO 23 - DSW Raw Encoder Counts (High 16-bits)
initIP_EP201SingleRegisterPort("pio23",1,1)

# PIO 24 - ID Errors (High 16-bits)
initIP_EP201SingleRegisterPort("pio24",1,1)

# PIO 25 - US Symmetry Encoder Difference Raw Low (High 16-bits)
initIP_EP201SingleRegisterPort("pio25",1,1)
# PIO 26 - US Symmetry Encoder Difference Raw High (High 16-bits)
initIP_EP201SingleRegisterPort("pio26",1,1)
# PIO 27 - DS Symmetry Encoder Difference Raw Low (High 16-bits)
initIP_EP201SingleRegisterPort("pio27",1,1)
# PIO 28 - DS Symmetry Encoder Difference Raw High (High 16-bits)
initIP_EP201SingleRegisterPort("pio28",1,1)
################## END FPGA IP-EP201 SETUP ######################



# ------------------------------------------------------------------------
# This section we will load all the databases 
# ------------------------------------------------------------------------

## Load iocAdmin database which reports on ioc health
dbLoadRecords("db/iocAdminRTEMS.db", "IOC=IOC:UND1:UC01")
dbLoadRecords("db/iocRelease.db", "IOC=IOC:UND1:UC01")

## Load motor records
dbLoadRecords("db/xxCamAsynMotor.vdb","U=USEG:UND1:150,M=CM1,MDESC=CAM 1,PORT=S0,ADDR=0")
dbLoadRecords("db/xxCamAsynMotor.vdb","U=USEG:UND1:150,M=CM2,MDESC=CAM 2,PORT=S1,ADDR=0")
dbLoadRecords("db/xxCamAsynMotor.vdb","U=USEG:UND1:150,M=CM3,MDESC=CAM 3,PORT=S2,ADDR=0")
dbLoadRecords("db/xxCamAsynMotor.vdb","U=USEG:UND1:150,M=CM4,MDESC=CAM 4,PORT=S3,ADDR=0")
dbLoadRecords("db/xxCamAsynMotor.vdb","U=USEG:UND1:150,M=CM5,MDESC=CAM 5,PORT=S4,ADDR=0")

## extra records for smart motor stats, TEMP, TORQUE, FW
dbLoadRecords("db/smart_extra.db","P=USEG:UND1:150:,M=CM1,PORT=S0,ADDR=0")
dbLoadRecords("db/smart_extra.db","P=USEG:UND1:150:,M=CM2,PORT=S1,ADDR=0")
dbLoadRecords("db/smart_extra.db","P=USEG:UND1:150:,M=CM3,PORT=S2,ADDR=0")
dbLoadRecords("db/smart_extra.db","P=USEG:UND1:150:,M=CM4,PORT=S3,ADDR=0")
dbLoadRecords("db/smart_extra.db","P=USEG:UND1:150:,M=CM5,PORT=S4,ADDR=0")

#####################(Marty Smith)############################
dbLoadRecords("db/HGVPU.db","U=USEG:UND1:150")
#dbLoadRecords("db/HGVPUmotors.db","U=USEG:UND1:150,S=0.773,MH=50.0,ML=3.5,PORT=S7,ADDR=0,IDMOTOR=USW,MDESC=USW")
#dbLoadRecords("db/HGVPUmotors.db","U=USEG:UND1:150,S=0.773,MH=50.0,ML=3.5,PORT=S7,ADDR=1,IDMOTOR=USA,MDESC=USA")
#dbLoadRecords("db/HGVPUmotors.db","U=USEG:UND1:150,S=0.773,MH=50.0,ML=3.5,PORT=S7,ADDR=2,IDMOTOR=DSW,MDESC=DSW")
#dbLoadRecords("db/HGVPUmotors.db","U=USEG:UND1:150,S=0.773,MH=50.0,ML=3.5,PORT=S7,ADDR=3,IDMOTOR=DSA,MDESC=DSA")
dbLoadRecords("db/smart_extra.db","P=USEG:UND1:150:,M=USW,PORT=S7,ADDR=0")
dbLoadRecords("db/smart_extra.db","P=USEG:UND1:150:,M=USA,PORT=S7,ADDR=1")
dbLoadRecords("db/smart_extra.db","P=USEG:UND1:150:,M=DSW,PORT=S7,ADDR=2")
dbLoadRecords("db/smart_extra.db","P=USEG:UND1:150:,M=DSA,PORT=S7,ADDR=3")
dbLoadRecords("db/IDcommon_NewPower.db","U=USEG:UND1:150,DH=100.0,DL=7.18,BL=7.19")
dbLoadRecords("db/IDLimitSwitches.db","U=USEG:UND1:150,PORT=limits,PORT1=internalIO")

dbLoadRecords("db/IDmotion.db","U=USEG:UND1:150,S=5.0,PORT=idmon")
dbLoadRecords("db/IDMonitors.db","U=USEG:UND1:150,PORT=idmon,PORT1=monitors")
dbLoadRecords("db/IDerrors.db","U=USEG:UND1:150")
dbLoadRecords("db/ID_FPGArev.db","U=USEG:UND1:150")
dbLoadRecords("db/FagorEncoders.db","U=USEG:UND1:150")

dbLoadRecords("db/HGVPU_coordMotion.db","U=USEG:UND1:150")
#####################(Marty Smith)############################

## Load database for Cam Motion
dbLoadRecords("db/xxCamMotion.vdb","U=USEG:UND1:150, UND=U01")

## Load database for Linear Motion
dbLoadRecords("db/xxLinearMotion.vdb","U=USEG:UND1:150,PORT=ai1, UND=U01, kmax=16")


#####################(Marty Smith)############################
# Linear encoders and asyn records for FPGA DIO 
# For tews_LinearSSI.db: L1=USW Encoder, L2=USA Encoder, L3=DSW Encoder, L4=DSA Encoder
# These are the linear encoder offsets for the 1/2 gap for this device
# You will need to devise a method for including these for eac device
# dbLoadRecords("db/tews_LinearSSI.db","U=USEG:UND1:150,PORT=LinEnc,L1=103.8174,L2=102.0518,L3=102.1204,L4=99.4575")
# HXU001 from Motion Solutions
dbLoadRecords("db/tews_LinearSSI.db","U=USEG:UND1:150,PORT=LinEnc,L1=89.2202,L2=89.0865,L3=88.0813,L4=87.9695")
#dbLoadRecords("db/asynRecord.db","P=mls:,R=IO4,PORT=internalIO,ADDR=0x800030,OMAX=0,IMAX=0")
#dbLoadRecords("db/asynRecord.db","P=mls:,R=IO4,PORT=internalIO1,ADDR=0x800038,OMAX=0,IMAX=0")
#dbLoadRecords("db/asynRecord.db","P=mls:,R=IO4,PORT=internalIO2,ADDR=0x800040,OMAX=0,IMAX=0")
#dbLoadRecords("db/asynRecord.db","P=mls:,R=IO4,PORT=internalIO3,ADDR=0x800080,OMAX=0,IMAX=0")
#dbLoadRecords("db/asynRecord.db","P=mls:,R=IO4,PORT=internalIO4,ADDR=0x800088,OMAX=0,IMAX=0")
#dbLoadRecords("db/asynRecord.db","P=mls:,R=IO4,PORT=internalIO5,ADDR=0x800068,OMAX=0,IMAX=0")
#dbLoadRecords("db/asynRecord.db","P=mls:,R=IO4,PORT=internalIO6,ADDR=0x800048,OMAX=0,IMAX=0")
#dbLoadRecords("db/asynRecord.db","P=mls:,R=IO4,PORT=internalIO7,ADDR=0x800050,OMAX=0,IMAX=0")
#dbLoadRecords("db/asynRecord.db","P=mls:,R=IO4,PORT=internalIO8,ADDR=0x800058,OMAX=0,IMAX=0")
#dbLoadRecords("db/asynRecord.db","P=mls:,R=IO4,PORT=internalIO9,ADDR=0x800060,OMAX=0,IMAX=0")
#dbLoadRecords("db/asynRecord.db","P=mls:,R=IO4,PORT=internalIO10,ADDR=0x800070,OMAX=0,IMAX=0")
##############################################################

## Load databases for RTD temperature monitors
#!dbLoadRecords("db/undulatorRTD.db","U=USEG:UND1:150,PORT=ai1")
#!dbLoadRecords("db/xxUndulatorRTD.vdb","U=USEG:UND1:150")

## Load databases for undulator smart monitors
#!dbLoadRecords("db/xxUndulatorSmartMon.vdb","U=USEG:UND1:150, B=BFW:UND1:110, PORT1=io8, PORT2=ai1")

## Load databases for calibrating CAMs
dbLoadRecords("db/xxCamCalibration.vdb","U=USEG:UND1:150")

## Load databases for alarm display summaries
dbLoadRecords("db/xxUndulatorDispAlarmSum.db","U=USEG:UND1:150")

## Load databases for automated display options
dbLoadRecords("db/xxUndulatorDisplay.vdb","U=USEG:UND1:150")

## Load databases for Undulator field calculations
dbLoadRecords("db/xxUndulatorField.vdb","U=USEG:UND1:150")
dbLoadRecords("db/useg1-poly.db")
dbLoadRecords("db/useg-poly-bb.db", "U=USEG:UND1:150, POSITION=1")
dbLoadRecords("db/poly-bb-ao.db", "U=USEG:UND1:150")

## Load databases for Undulator BPM and X-YCOR corrections
dbLoadRecords("db/xxBPMCorrection.vdb", "U=USEG:UND1:150")
dbLoadRecords("db/xxCORcorrection.vdb", "U=USEG:UND1:150, UN1=USEG:UND1:250, N=1")

## Load database to save reference motor positions
dbLoadRecords("db/save-reference-position.db", "U=USEG:UND1:150")

## asynRecord database for each link for diagnostic debugging
dbLoadRecords("db/asynRecord.db","P=USEG:UND1:150:ASYN,R=CAM1,PORT=L0,ADDR=0,IMAX=0,OMAX=0")
dbLoadRecords("db/asynRecord.db","P=USEG:UND1:150:ASYN,R=CAM2,PORT=L1,ADDR=0,IMAX=0,OMAX=0")
dbLoadRecords("db/asynRecord.db","P=USEG:UND1:150:ASYN,R=CAM3,PORT=L2,ADDR=0,IMAX=0,OMAX=0")
dbLoadRecords("db/asynRecord.db","P=USEG:UND1:150:ASYN,R=CAM4,PORT=L3,ADDR=0,IMAX=0,OMAX=0")
dbLoadRecords("db/asynRecord.db","P=USEG:UND1:150:ASYN,R=CAM5,PORT=L4,ADDR=0,IMAX=0,OMAX=0")
dbLoadRecords("db/asynRecord.db","P=USEG:UND1:150:ASYN,R=HGU,PORT=L7,ADDR=0,IMAX=0,OMAX=0")

## Load database for autosave/restore status pv's
dbLoadRecords("db/save_restoreStatus.db","P=IOC:UND1:UC01:")

#Load unique items
< iocBoot/ioc-und1-uc01/st-unique.cmd

## autosave/restore settings
save_restoreSet_status_prefix( "IOC:UND1:UC01:")
save_restoreSet_IncompleteSetsOk(1)
save_restoreSet_DatedBackupFiles(1)

set_requestfile_path("/data/autosave-req") 
set_requestfile_path("./")
set_savefile_path("/data","autosave")

## ==============================================
## New method for autosave and restore
#  Decide what is saved by specifying it in the
#  EPICS databases
## =============================================
set_pass0_restoreFile("info_positions.sav")
set_pass0_restoreFile("info_settings.sav")

## =============================================

#cd $(TOP,undefined)/iocBoot/$(IOC,undefined)

## Load Access Security File
# getenv("ACF_INIT") && cexpsh( getenv("ACF_INIT"), 0 )

# Server to dump list of PVs to a pvlist client
# over the network. Not yet working
#pvlistserver("22222")

# Initialize/Start the EPICS Kernel
iocInit()

#Load unique items
< iocBoot/ioc-und1-uc01/st-post-unique.cmd

# =====================================================
# Turn on caPutLogging:
# Log values only on change to the iocLogServer:
caPutLogInit("172.27.8.31:7004")
caPutLogShow(2)
# =====================================================

## ===========================================================
## Start autosave routines to save our data
## ===========================================================
# optional, needed if the IOC takes a very long time to boot.
epicsThreadSleep( 1.0)

## Handle autosave 'commands' contained in loaded databases.
# change directory to ioc startup area
chdir("/data/autosave-req")
iocshCmd("makeAutosaveFiles()")

create_monitor_set("info_positions.req", 5, "U=USEG:UND1:150, B=BFW:UND1:110")
create_monitor_set("info_settings.req", 30, "U=USEG:UND1:150")

# Let's start up our Sequencers:
seq( &camCal, "S=USEG:UND1:150")
#!seq( &motorMon, "S=USEG:UND1:150")
#!seq( &bfwMon, "B=BFW:UND1:110, S=USEG:UND1:150")
