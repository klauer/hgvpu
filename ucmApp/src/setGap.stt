program setGap
        option +d;
        option -c;
        option +r;


/** Program initialization **/
/* C includes and method prototypes */
%{
#include <epicsThread.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdio.h>
#include <sys/time.h>
#include <epicsString.h>
#include <epicsStdio.h>
#include <asynOctetSyncIO.h>

#define inputEos "\r"
#define outputEos " "
#define BUF_SIZE 200

static int writeRead(SS_ID ssId, struct UserVar *pVar, char *command, char *reply, char *stateName);
static int getMotorMoving(SS_ID ssId, struct UserVar *pVar);
static int waitEpicsMotors(SS_ID ssId, struct UserVar *pVar);
static int getTimeStamp(SS_ID ssId, char *timeStampString);
static int logToIOCshell(SS_ID ssId, char *logMessage);
}%

/** SNL variables  **/
/* Configuration and communication */
char stringOut[200];
char stringIn[200];
char abortCommand[200];
char *asynPort;
char *pasynUser;
int initStatus = 0;
int numAxes = 4;
int movingLarger = 0;
/* Status for asyn operations */
int sg_status = 0;
int am_status = 0;

/* HXU strongback distances in mm */
/* distance beetween upstream end and downstream end */
double distEndToEnd = 3419.050;
/* distance between upstream end and upstream motor */
double distToUsMtr =  798.525;
/* distance between upstream end and downstream motor */
double distToDsMtr = 2620.525;
/* distance between upstream motor and downstream motor */
double distBtwnMtr = 1822.000;

/* HXU specific conversion factor (from ANL database) */
/* Device End to Motor conversion factor */
double EndMotFactor = 0.76670;
/* Linear Encoder to Motor conversion factor */
double LinMotFactor = 0.76670;
/* Motor to Device End conversion factor */
double MotEndFactor = 1.437386;


/* Positions and new values */
double desiredGapTemp = 0;
double deadbandTemp = 0;
double desiredUsGap = 0;
double desiredDsGap = 0;
double desiredUsMotorPosition = 0;
double desiredDsMotorPosition = 0;
double usaMotorAmountToMove = 0;
double uswMotorAmountToMove = 0;
double dsaMotorAmountToMove = 0;
double dswMotorAmountToMove = 0;
double moveFraction = 0.9;

double usaPos = 0;
double uswPos = 0;
double dsaPos = 0;
double dswPos = 0;
int usaPos_raw = 0;
int uswPos_raw = 0;
int dsaPos_raw = 0;
int dswPos_raw = 0;
int moveVelo_raw = 0;
int acclDccl_raw = 0;

int sampleRate = 0;
double scalingFactorVelo = 0;
double scalingFactorAD = 0;

/* Setpoint PVs */
double desiredGap;        assign desiredGap   to "{DEV}:GapDes";
double desiredTaper;      assign desiredTaper to "{DEV}:TaperDes";
/* Move precision and retry */
double deadband;          assign deadband to "{DEV}:DeadbandGap";
double moveFrac;          assign moveFrac to "{DEV}:MoveFraction";
double moveVelo;          assign moveVelo to "{DEV}:MotorVelocity";
double acclDccl;          assign acclDccl to "{DEV}:MotorAccl";
int singleApproach;       assign singleApproach to "{DEV}:SingleApproach";      monitor singleApproach;
int rtry;                 assign rtry to "{DEV}:Retries";                       monitor rtry;
int rtryMax;              assign rtryMax to "{DEV}:MaxRetries";                 monitor rtryMax;

/* Position readback PVs */
double actualGap;         assign actualGap to "{DEV}:Gap";                      monitor actualGap;
double calcUsGap;         assign calcUsGap to "{DEV}:USGap";                    monitor calcUsGap;
double calcDsGap;         assign calcDsGap to "{DEV}:DSGap";                    monitor calcDsGap;
double calcAisleTaper;    assign calcAisleTaper to "{DEV}:AisleTaper";          monitor calcAisleTaper;
double calcWallTaper;     assign calcWallTaper to "{DEV}:WallTaper";            monitor calcWallTaper;
double calcUsSymmetry;    assign calcUsSymmetry to "{DEV}:USSymmetry";          monitor calcUsSymmetry;
double calcDsSymmetry;    assign calcDsSymmetry to "{DEV}:DSSymmetry";          monitor calcDsSymmetry;

/* Hardware position readback PVs */
double usaHalfGapEncoder; assign usaHalfGapEncoder to "{DEV}:USALinearEncoder"; monitor usaHalfGapEncoder;
double uswHalfGapEncoder; assign uswHalfGapEncoder to "{DEV}:USWLinearEncoder"; monitor uswHalfGapEncoder;
double dsaHalfGapEncoder; assign dsaHalfGapEncoder to "{DEV}:DSALinearEncoder"; monitor dsaHalfGapEncoder;
double dswHalfGapEncoder; assign dswHalfGapEncoder to "{DEV}:DSWLinearEncoder"; monitor dswHalfGapEncoder;
double usFullGapEncoder;  assign usFullGapEncoder  to "{DEV}:USGapEncoder";     monitor usFullGapEncoder;
double dsFullGapEncoder;  assign dsFullGapEncoder  to "{DEV}:DSGapEncoder";     monitor dsFullGapEncoder;

/* Motor position setpoint */
double usaMotorVal;       assign usaMotorVal to "{DEV}:USAMotor.VAL";           monitor usaMotorVal;
double uswMotorVal;       assign uswMotorVal to "{DEV}:USWMotor.VAL";           monitor uswMotorVal;
double dsaMotorVal;       assign dsaMotorVal to "{DEV}:DSAMotor.VAL";           monitor dsaMotorVal;
double dswMotorVal;       assign dswMotorVal to "{DEV}:DSWMotor.VAL";           monitor dswMotorVal;
/* Motor position readback */
double usaMotorRbv;       assign usaMotorRbv to "{DEV}:USAMotor.RBV";           monitor usaMotorRbv;
double uswMotorRbv;       assign uswMotorRbv to "{DEV}:USWMotor.RBV";           monitor uswMotorRbv;
double dsaMotorRbv;       assign dsaMotorRbv to "{DEV}:DSAMotor.RBV";           monitor dsaMotorRbv;
double dswMotorRbv;       assign dswMotorRbv to "{DEV}:DSWMotor.RBV";           monitor dswMotorRbv;
/* Motor position calculated from encoder */
double usaMotorGap;       assign usaMotorGap to "{DEV}:USAMotorGap";            monitor usaMotorGap;
double uswMotorGap;       assign uswMotorGap to "{DEV}:USWMotorGap";            monitor uswMotorGap;
double dsaMotorGap;       assign dsaMotorGap to "{DEV}:DSAMotorGap";            monitor dsaMotorGap;
double dswMotorGap;       assign dswMotorGap to "{DEV}:DSWMotorGap";            monitor dswMotorGap;
double motorResolution;   assign motorResolution to "{DEV}:USAMotor.MRES";

/* HGVPU command and status PVs */
int startGapAdjustment;   assign startGapAdjustment to "{DEV}:Start";           monitor startGapAdjustment;
int stop;                 assign stop to "{DEV}:Stop";                          monitor stop;
int checkGap;             assign checkGap to "{DEV}:CheckGap";                  monitor checkGap;
int undulatorError;       assign undulatorError to "{DEV}:UndulatorError";      monitor undulatorError;
int calibMotors;          assign calibMotors to "{DEV}:CalibrateMotors.PROC";
int triggerDefer;         assign triggerDefer to "{DEV}:GapMotor:Trig.PROC";
int movingDirection;      assign movingDirection to "{DEV}:MotionDirection";
int deviceActive;         assign deviceActive to "{DEV}:DeviceActive";
string message1;          assign message1 to "{DEV}:Message1.VAL";
string message2;          assign message2 to "{DEV}:Message2.VAL";


/* Debug and simulation PVs */
int debugLevel;           assign debugLevel to "{DEV}:DebugLevel.VAL";          monitor debugLevel;
int simMode;              assign simMode to "{DEV}:SimMode.VAL";                monitor simMode;
string setGapState;       assign setGapState to "{DEV}:SeqProgramState.VAL";

/* Abort command and status PVs */
//TODO: clean up this section SXU
int abort;                assign abort to "{DEV}:Abort.VAL";                    monitor abort;
string abortState;        assign abortState to "{DEV}:ABORT_STATE.VAL";


/* stateSet to change gap */
ss setGap
{
  /* Initialize state */
  state init {
    entry {
      pvGet(debugLevel,SYNC);
      if (debugLevel) logToIOCshell(ssId, "setGap:init: entry");

      sprintf(setGapState, "setGap:init");
      pvPut(setGapState, SYNC);
      sg_status = 0;
      /* Initialization of variables and PVs */
      /*initStatus = 0;*/
      stop = 0;
      pvPut(stop);
      rtry = 0;
      pvPut(rtry);
      startGapAdjustment = 0;
      pvPut(startGapAdjustment);
      deviceActive = 0;
      pvPut(deviceActive);
      numAxes = 4;

      /* Creating ABORT string */
      sprintf(abortCommand, "S:0");

      /* Connecting to ASYN port for motors */
      asynPort = macValueGet("PORT");
      %%pVar->sg_status = pasynOctetSyncIO->connect(pVar->asynPort, 0, (asynUser **)&pVar->pasynUser, NULL);
      if (sg_status != 0) {
        logToIOCshell(ssId, "trajectoryScan error in pasynOctetSyncIO->connect");
        printf("   sg_status=%d, port=%s\n", sg_status, asynPort);
      }

      /* Retrive sampling rate of the motor */
      sprintf(stringOut, "RSAMP:1");
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);
      if (sg_status != 0)
        sampleRate = 8000;
      else
        sampleRate = atoi(stringIn);

      /* Set scaling factor for velocity and acceleration */
      scalingFactorVelo = 65536.0 / sampleRate;
      scalingFactorAD = scalingFactorVelo / sampleRate;

      if (initStatus == 0) initStatus = 1;
      if (debugLevel) logToIOCshell(ssId, "setGap:init: done; going to 'idle'");
    }

    /* Continue to idle state */
    when() {
    } state idle
  }

  /* Idle state and on change of EPICS PVs preform action */
  state idle {
    entry {
      if (debugLevel) logToIOCshell(ssId, "setGap:idle: entry");
      sprintf(setGapState, "setGap:idle");
      pvPut(setGapState, SYNC);
      /* Clear flags that indicate/start motion */
      startGapAdjustment = 0;
      pvPut(startGapAdjustment);
      deviceActive = 0;
      pvPut(deviceActive);
      movingLarger = 0;
    }

    /* writeRead() has failed in the transition leading to this state*/
    when(sg_status != 0) {
      printf(" setGap:idle ERROR: previous writeRead() returned %d. Clearing the status and returning to idle.\n", sg_status);
      sg_status = 0;
    } state idle

    /* If stop is issued */
    when(stop == 1) {
      if (debugLevel) logToIOCshell(ssId, "setGap:idle: going to 'stop'");
    } state stop

    /* Device is in not safe state for operation, clear start flage and return to idle state */
    when((startGapAdjustment == 1) && ((undulatorError == 1) || (checkGap == 1))) {
      /* Reprot message on the screen */
      sprintf(message2,"Device not ready to move!");
      pvPut(message2,SYNC);
      /* Clear Flag */
      startGapAdjustment = 0;
      pvPut(startGapAdjustment,SYNC);
    } state idle

    /* When motors are commanded to Start and no errors reported from undulator */
    when((startGapAdjustment == 1) && (undulatorError == 0) && (checkGap == 0)) {

      /* Retrieve PV values */
      pvGet(desiredGap,SYNC);
      pvGet(desiredTaper,SYNC);
      pvGet(deadband,SYNC);
      pvGet(moveFrac,SYNC);
      pvGet(moveVelo,SYNC);
      pvGet(acclDccl,SYNC);
      pvGet(motorResolution,SYNC);

      /* Write start message to the PV */
      sprintf(message1, "Device Started");
      pvPut(message1,SYNC);
      sprintf(message2, " ");
      pvPut(message2,SYNC);

      /* Calculate direction of the move */
      if (desiredGap > actualGap)
        movingDirection = 1;
      else
        movingDirection = 0;
      pvPut(movingDirection, SYNC);

      /* Clear retries and Go flag */
      rtry = 0;
      pvPut(rtry);
      startGapAdjustment = 0;
      pvPut(startGapAdjustment);
      deviceActive = 1;
      pvPut(deviceActive);

      /* If single approach and opening gap */
      if( (desiredGap > actualGap) && (singleApproach == 1) ) {
        /* Store desired gap and deadband */
        desiredGapTemp = desiredGap;
        deadbandTemp = deadband;
        /* Enlarge desired gap and deadband for single approach inital move */
        desiredGap = desiredGap + 1;
        deadband = 0.5;
        movingLarger = 1;
      }
      if (debugLevel) logToIOCshell(ssId, "setGap:idle: going to 'calcMove'");
    } state calcMove
  }

  /* State for calculating new motor positions */
  state calcMove {
    entry {
      if (debugLevel) logToIOCshell(ssId, "setGap:calcMove: entry'");
      sprintf(setGapState, "setGap:calcMove");
      pvPut(setGapState, SYNC);
    }

    /* If stop is issued or writeRead() has failed in the transition leading to this state */
    when( (stop == 1) || (sg_status != 0) ) {
      if (sg_status != 0)
        printf(" setGap:move ERROR: previous writeRead() returned %d. Going to stop.\n", sg_status);
    } state stop

    /* Disable retry checking for time based gap setting */
    when(rtry >= rtryMax) {
      if (debugLevel) printf("setGap:calcMove: rtry >= rtryMax %d >= %d\n", rtry, rtryMax);
    } state moveComplete

    /* When in single approach and gap above modified desired gap */
    when( (movingLarger == 1) && (actualGap > (desiredGap - 0.5))) {
      if (debugLevel) logToIOCshell(ssId, "setGap:calcMove: single approach, above desired gap");
    } state moveComplete

    /* Calculate new positions */
    when() {
      /* Calibrate motor positions with linear encoder readback */
      calibMotors = 1;
      pvPut(calibMotors,SYNC);
      /* Wait for sync to complete and monitors to update */
      epicsThreadSleep(0.3);

      /* Calculating position based on scaling factor from ANL */
      /* Desired gap set at US side, gap adjusted for taper on DS side */
      //desiredUsGap = desiredGap;
      //desiredDsGap = desiredGap + desiredTaper;
      /* Desired value for motor per side */
      //desiredUsMotorPosition = (desiredUsGap * EndMotFactor + desiredDsGap * (1.0 - EndMotFactor))/2.0;
      //desiredDsMotorPosition = (desiredDsGap * EndMotFactor + desiredUsGap * (1.0 - EndMotFactor))/2.0;

      /* Calculating new motor positions based on distances between strongback end and motor position*/
      desiredUsMotorPosition = (desiredGap/2.0) + (distToUsMtr/distEndToEnd)*(desiredTaper/2.0);
      desiredDsMotorPosition = (desiredGap/2.0) + (distToDsMtr/distEndToEnd)*(desiredTaper/2.0);

      usaMotorAmountToMove = desiredUsMotorPosition - usaMotorGap;
      uswMotorAmountToMove = desiredUsMotorPosition - uswMotorGap;
      dsaMotorAmountToMove = desiredDsMotorPosition - dsaMotorGap;
      dswMotorAmountToMove = desiredDsMotorPosition - dswMotorGap;

      /* Calculate factor for retries */
      if ( fabs(actualGap - desiredGap ) < 0.1 )
        /* If small adjustment, move motor to end point */
        moveFraction = 1.0;
      else
        /* Otherwis do fraction of the move */
        moveFraction = moveFrac;

      /* Calculate new motor positions */
      usaPos = usaMotorRbv + moveFraction * usaMotorAmountToMove;
      uswPos = uswMotorRbv + moveFraction * uswMotorAmountToMove;
      dsaPos = dsaMotorRbv + moveFraction * dsaMotorAmountToMove;
      dswPos = dswMotorRbv + moveFraction * dswMotorAmountToMove;

      /* Scale new positions to raw value and push to motor */
      usaPos_raw = (int) (usaPos * motorResolution);
      uswPos_raw = (int) (uswPos * motorResolution);
      dsaPos_raw = (int) (dsaPos * motorResolution);
      dswPos_raw = (int) (dswPos * motorResolution);
      moveVelo_raw = (int) ((moveVelo/motorResolution) * scalingFactorVelo);
      acclDccl_raw = (int) (((moveVelo/motorResolution) / acclDccl) * scalingFactorAD);

      /* Create a string to send to controller to start motor move */
      sprintf(stringOut, "iii:1=%d", uswPos_raw);
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);
      sprintf(stringOut, "jjj:1=%d", dswPos_raw);
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);
      sprintf(stringOut, "kkk:1=%d", dsaPos_raw);
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);
      sprintf(stringOut, "lll:1=%d", usaPos_raw);
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);
      sprintf(stringOut, "vvv:1=%d", moveVelo_raw);
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);
      sprintf(stringOut, "aaa:1=%d", acclDccl_raw);
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);

      /* Enable motors and disable breaks */
      sprintf(stringOut, "BRKRLS:0");
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);

      if (debugLevel) {
        printf("setGap:calcMove: desiredGap = %f, desiredTaper = %f'\n", desiredGap, desiredTaper);
        printf("setGap:calcMove: uswPos = %f (%d)'\n", uswPos, uswPos_raw);
        printf("setGap:calcMove: dswPos = %f (%d)'\n", dswPos, dswPos_raw);
        printf("setGap:calcMove: dsaPos = %f (%d)'\n", dsaPos, dsaPos_raw);
        printf("setGap:calcMove: usaPos = %f (%d)'\n", usaPos, usaPos_raw);
        printf("setGap:calcMove: moveVelo = %f (%d)'\n", moveVelo, moveVelo_raw);
        printf("setGap:calcMove: acclDccl = %f (%d)'\n", acclDccl, acclDccl_raw);
      }
    } state move
  }

  /* State that starts the move */
  state move {
    entry {
      if (debugLevel){
        logToIOCshell(ssId, "setGap:move: entry");
        printf("Distance to move: UsWall=%f, DsWall=%f, DsAisle=%f, UsAisle=%f [mm] \n",
                                  fabs(uswMotorAmountToMove),fabs(dswMotorAmountToMove),
                                  fabs(dsaMotorAmountToMove),fabs(usaMotorAmountToMove));
      }
      sprintf(setGapState, "setGap:move");
      pvPut(setGapState, SYNC);
    }

    /* If stop is issued or writeRead() has failed in the transition leading to this state */
    when( (stop == 1) || (sg_status != 0) ) {
      if (sg_status != 0)
        printf(" setGap:move ERROR: previous writeRead() returned %d. Going to stop.\n", sg_status);
    } state stop

    when( (fabs(usaMotorAmountToMove) < deadband) && (fabs(uswMotorAmountToMove) < deadband) &&
          (fabs(dsaMotorAmountToMove) < deadband) && (fabs(dswMotorAmountToMove) < deadband) ) {
      epicsThreadSleep(1.5);
      if (debugLevel) logToIOCshell(ssId, "setGap:move: All absolute moves less than deadband. Going to moveComplete");
    } state moveComplete

    /* Send command to start motion */
    when( delay(0.3) ) {
      if (debugLevel) logToIOCshell(ssId, "setGap:move: Waiting for motion complete");
      /* Wait if any of the motors is moving */
      %%waitEpicsMotors(ssId, pVar);
      if (debugLevel) logToIOCshell(ssId, "setGap:move: Wait complete");

      /* Send comand to start move */
      sprintf(stringOut, "GOSUB(1)");
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);

    } state moving
  }

  /* State while motors are moving */
  state moving {
    entry {
      if (debugLevel) logToIOCshell(ssId, "setGap:moving: entry");
      sprintf(setGapState, "setGap:moving");
      pvPut(setGapState, SYNC);
    }

    /* If stop is issued or writeRead() has failed in the transition leading to this state */
    when( (stop == 1) || (sg_status != 0) ) {
      if (sg_status != 0)
        printf(" setGap:move ERROR: previous writeRead() returned %d. Going to stop.\n", sg_status);
    } state stop

    /* When moving */
    when(delay(0.2)) {
      /*Wait while motors are moving */
      %%waitEpicsMotors(ssId, pVar);
      /* When move done, increase number of retrys */
      rtry = rtry + 1;
      pvPut(rtry);
    } state calcMove
  }

  /* State when motors finish move */
  state moveComplete {
    entry {
      if (debugLevel) logToIOCshell(ssId, "setGap:moveComplete: entry'");
      sprintf(setGapState, "setGap:moveComplete");
      pvPut(setGapState, SYNC);
    }

    /* If stop is issued or writeRead() has failed in the transition leading to this state */
    when( (stop == 1) || (sg_status != 0) ) {
      if (sg_status != 0)
        printf(" setGap:move ERROR: previous writeRead() returned %d. Going to stop.\n", sg_status);
    } state stop

    /* When in single approach */
    when( movingLarger == 1) {
      /* Restore original values */
      movingLarger = 0;
      desiredGap = desiredGapTemp;
      deadband = deadbandTemp;
    } state calcMove

    /* On complete move */
    when() {
      /* Issue a global stop */
      sprintf(stringOut, "S:0");
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);
      epicsThreadSleep(0.2);
      if ( sg_status != 0 ) {
        sprintf(stringOut, "S:0");
        %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);
        epicsThreadSleep(0.2);
      }
      /* Engage brakes on all motors */
      sprintf(stringOut, "BRKENG:0");
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);
      epicsThreadSleep(0.2);
      /* Turn Off motor current */
      sprintf(stringOut, "OFF:0");
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);

      /* Calibrate motors at final position */
      calibMotors = 1;
      pvPut(calibMotors);

      /* Write message to a PV */
      sprintf(message1, "Device At Destination");
      pvPut(message1);
    } state idle
  }

  /* Stop state */
  state stop {
    entry{
      if (debugLevel) logToIOCshell(ssId, "setGap:stop: entry'");
      sprintf(setGapState, "setGap:stop");
      pvPut(setGapState, SYNC);
    }

    /* On STOP flag */
    when() {

      if (sg_status > 0)
        logToIOCshell(ssId, "Trying to stop the motors after writeRead error! Then transition into idle");

      /* Send out an Abort all axes command */
      sprintf(stringOut, "S:0");
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);
      epicsThreadSleep(0.2);
      sprintf(stringOut, "BRKENG:0");
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);
      epicsThreadSleep(0.2);
      /* Turn Off motor current */
      sprintf(stringOut, "OFF:0");
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);

      /* Raise virtual axis done moving flag */
      deviceActive = 0;
      pvPut(deviceActive);
      /* Clear stop flag */
      stop = 0;
      pvPut(stop);

    } state idle
  }
}

/* stateSet to abort move */
ss abortMove {

  state am_init {
    /* writeRead() has failed in the transition leading to this state*/
    when(am_status != 0) {
      printf("abortMove:am_init ERROR: previous writeRead() returned %d. Going to am_init.\n", am_status);
      /* Clear status flag */
      am_status = 0;
    } state am_init

    when() {
      sprintf(abortCommand, "S:0");
    } state monitorAbort

  }

  state monitorAbort {
    entry{
      sprintf(abortState, "abortMove:monitorAbort");
      pvPut(abortState, SYNC);
   }

    /* writeRead() has failed in the transition leading to this state*/
    when(am_status != 0) {
      printf("abortMove:monitorAbort ERROR: previous writeRead() returned %d. Going to am_init.\n", am_status);
    } state am_init

    /* When Abort is triggered */
    when((abort == 1) && delay(0.1)) {
      /* Issue an abort command on controller */
      %%pVar->am_status = writeRead(ssId, pVar, pVar->abortCommand, pVar->stringIn, pVar->abortState);
      if (debugLevel) logToIOCshell(ssId, "abortMove: sent command '%s'");
      epicsThreadSleep(0.2);
      if (am_status != 0 ) {
        /* If problem with writing abort command to controller, try again */
        %%pVar->am_status = writeRead(ssId, pVar, pVar->abortCommand, pVar->stringIn, pVar->abortState);
        epicsThreadSleep(0.2);
      }
      /* Engage break if abort command recieved */
      sprintf(stringOut, "BRKENG:0");
      %%pVar->am_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->abortState);
      epicsThreadSleep(0.2);
      /* Turn Off motor current */
      sprintf(stringOut, "OFF:0");
      %%pVar->sg_status = writeRead(ssId, pVar, pVar->stringOut, pVar->stringIn, pVar->setGapState);

      /* Set stop PV for main stateSet to interrupt move */
      stop = 1;
      pvPut(stop);
      /* Clear abort PV */
      abort=0;
      pvPut(abort);
    } state monitorAbort
  }
}

%{

/* WriteRead operation through asyn port */
static int writeRead(SS_ID ssId, struct UserVar *pVar, char *command, char *reply, char *stateName)
{
  asynStatus status=0;
  char buffer[BUF_SIZE];
  size_t nwrite, nread;
  int eomReason;

  if (!(pVar->simMode)) {
    status = pasynOctetSyncIO->writeRead((asynUser *)pVar->pasynUser, buffer,
             strlen(command), reply, BUF_SIZE,
             30.0, &nwrite, &nread, &eomReason);
    if (status) printf("writeRead called from %s: pasynOctetSyncIO->writeRead returned %d\n", stateName, status);
 }
  if (pVar->simMode || (pVar->debugLevel)) {
    if (buffer[strlen(buffer)-1] == '\n')
      buffer[strlen(buffer)-1] = '\0';
    printf("    writeRead:command='%s', reply='%s'\n", buffer, reply);
  }

  return(status);
}

/* Check if motors are moving */
static int getMotorMoving(SS_ID ssId, struct UserVar *pVar)
{
  char inputBuff[BUF_SIZE], outputBuff[BUF_SIZE];
  size_t nwrite, nread;
  int eomReason;
  int move_active = 0;
  int count, status, can_addr;

  #define MOVING 0x4


  for (can_addr=1, count=0; can_addr <= pVar->numAxes; can_addr++) {
    /* If Stop is issued while in for loop */
    if ( pVar->stop == 1 )
      return(0);

    /* Create command that reads motor status word */
    sprintf(outputBuff, "RW(0):%d", can_addr);
    /* Send command to the controller */
    status = pasynOctetSyncIO->writeRead((asynUser *)pVar->pasynUser, outputBuff,
             strlen(outputBuff), inputBuff, BUF_SIZE,
             30.0, &nwrite, &nread, &eomReason);

    if (status)
      printf("getMotorMoving: pasynOctetSyncIO->writeRead returned %d\n", status);
    /* Parse return of the command */
    move_active |= (atoi(inputBuff) & MOVING) == MOVING;
    if (pVar->debugLevel) {
      printf("getMotorMoving: outputBuff='%s'\n", outputBuff);
      printf("getMotorMoving: inputBuff='%s'\n", inputBuff);
      printf("getMotorMoving: move_active= %d\n", move_active);
    }
    /* If any motor is moving return 1  */
    if (move_active)
      return(1);
    /* Otherwise increase the count and continue */
    else {
      count++;
      if (count>3) break;
    }
  }

  return(0);
}

/* Wait while motors are moving */
static int waitEpicsMotors(SS_ID ssId, struct UserVar *pVar)
{
  if(pVar->debugLevel)
    logToIOCshell(ssId, "waitEpicsMotors");
  /* Read status of motors, if they are moving */
  while (getMotorMoving(ssId, pVar)) {
    epicsThreadSleep((1/10.0));
  }

 return(0);
}

/* Create a timestamp with current time */

static int getTimeStamp(SS_ID ssId, char *timeStampString)
{
  struct timeval preciseCurrentTime;
  time_t currentTime_sec;
  struct tm *currentTime;
  char tmp_buff[32];
  size_t size;

  gettimeofday(&preciseCurrentTime, NULL);
  currentTime_sec = preciseCurrentTime.tv_sec;
  currentTime = localtime(&currentTime_sec);
  size = strftime(tmp_buff, sizeof tmp_buff, "%Y-%m-%d_%H:%M:%S", currentTime);
  snprintf(timeStampString, (size + 8) , "%s.%06ld", tmp_buff, preciseCurrentTime.tv_usec);
  return(0);
}

static int logToIOCshell(SS_ID ssId, char *logMessage) {
  char timestamp[32];
  getTimeStamp(ssId, timestamp);
  printf("%s : %s\n",timestamp, logMessage);
  return(0);
}

}%

